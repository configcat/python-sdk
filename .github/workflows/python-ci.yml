name: Python CI

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.5", "3.6", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ windows-latest, macos-latest, ubuntu-latest ]
        exclude:  # Python < v3.8 does not support Apple Silicon ARM64.
          - python-version: "3.5"
            os: macos-latest
          - python-version: "3.6"
            os: macos-latest
          - python-version: "3.7"
            os: macos-latest
        include:  # So run those legacy versions on Intel CPUs.
          - python-version: "3.5"
            os: macos-13
          - python-version: "3.6"
            os: macos-13
          - python-version: "3.7"
            os: macos-13

    steps:
    - uses: actions/checkout@v4

    - name: Run tests in Docker for legacy Python
      if: matrix.os == 'ubuntu-latest' && contains(fromJSON('["3.5","3.6","3.7"]'), matrix.python-version)
      run: |
        docker run --rm -v ${{ github.workspace }}:/app -w /app python:${{ matrix.python-version }} bash -c "
          pip install --upgrade pip &&
          pip install pytest pytest-cov parameterized mock flake8 &&
          pip install -r requirements.txt &&
          flake8 configcatclient --count --show-source --statistics &&
          pytest configcatclienttests
        "

    - name: Set up Python ${{ matrix.python-version }}
      if: ${{ ! (matrix.os == 'ubuntu-latest' && contains(fromJSON('["3.5","3.6","3.7"]'), matrix.python-version)) }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
      env:
        # Needed on Ubuntu for Python 3.5 build.
        PIP_TRUSTED_HOST: "pypi.python.org pypi.org files.pythonhosted.org"

    - name: Install dependencies
      if: ${{ ! (matrix.os == 'ubuntu-latest' && contains(fromJSON('["3.5","3.6","3.7"]'), matrix.python-version)) }}
      run: |
        python -m pip install --upgrade pip 
        pip install pytest pytest-cov parameterized mock flake8
        pip install -r requirements.txt

    - name: Lint with flake8
      if: ${{ ! (matrix.os == 'ubuntu-latest' && contains(fromJSON('["3.5","3.6","3.7"]'), matrix.python-version)) }}
      run: |
        # Statical analysis
        flake8 configcatclient --count --show-source --statistics

    - name: Test
      if: ${{ ! (matrix.os == 'ubuntu-latest' && contains(fromJSON('["3.5","3.6","3.7"]'), matrix.python-version)) }}
      run: pytest configcatclienttests


  coverage:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install pytest pytest-cov parameterized mock flake8
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # Statical analysis
          flake8 configcatclient --count --show-source --statistics

      - name: Run coverage
        run: pytest --cov=configcatclient configcatclienttests

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
